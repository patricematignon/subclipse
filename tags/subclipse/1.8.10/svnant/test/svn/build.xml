<?xml version="1.0"?>
<project name="svn-test" basedir="." default="all">
  
  <dirname file="${ant.file.svn-test}"    property="dir.svn-test"/>
  <dirname file="${dir.svn-test}"         property="dir.test"/>
  <dirname file="${dir.test}"             property="dir.svnant"/>
  
  <!--  all properties are in build.properties --> 
  
  <property file="build.properties" /> 

  <path id="project.classpath">
    <fileset dir="${dir.svnant}/lib/svnclientadapter" includes="**/*.jar"/>
    <fileset dir="${dir.svnant}/lib/svnkit">
      <include name="**/*.jar"/>
      <exclude name="**/svnkit-cli.jar"/>
      <exclude name="**/svnkit-javahl16.jar"/>
    </fileset>
    <pathelement path="${dir.svnant}/bin"/>
  </path>  
  
  <!-- Define svnant tasks and types. -->
  <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath"/>

  <svnSetting client="${svn.client}" id="defaultsettings"       username="${username}" password="${password}"/>
  <svnSetting client="${svn.client}" id="no-credentials"/>
  <svnSetting client="${svn.client}" id="nopassword"            username="${username}"/>
  <svnSetting client="${svn.client}" id="formatteddate"         username="${username}" password="${password}" dateFormatter="yyyy/MM/dd HH:mm"/>
  <svnSetting client="${svn.client}" id="formatteddate-german"  username="${username}" password="${password}" dateFormatter="dd-MMM-yyyy HH:mm"/>
  <svnSetting client="${svn.client}" id="nopassword-cedric"     username="Cedric Chabanois"/>
  <svnSetting client="${svn.client}" id="nopassword-user1"      username="user1" />
  <svnSetting client="${svn.client}" id="nopassword-user2"      username="user2"/>
  <svnSetting client="${svn.client}" id="nopassword-empty"      username=""/>

  <target name="clean">
    <delete dir="workingcopy"/>
    <delete dir="workingcopy2"/>    
    <delete dir="coHEAD"/>
    <delete dir="co0"/>
    <delete dir="export1"/>
    <delete dir="test"/>
  </target>

  <!-- create the test repository -->
  <target name="createTestRepository">
    <echo>creating repository (you need svnadmin in your path if using command line interface) ...</echo>
    <delete dir="repository"/>  
    <svn refid="defaultsettings">
      <createRepository path="repository"/>
    </svn>
  </target>


  <!-- init target is executed before each other "test"Target -->
  <target name="init" depends="clean, createTestRepository">

    <!-- if urlRepos is not defined in build.properties, we define it here 
       urlRepos is the url of the repository that will be used for most tests -->
    <property name="testReposLocation" location="repository" />
     <!-- we need / separator -->
    <pathconvert property="testReposPath" dirsep="/">
      <path path="${testReposLocation}"/>
    </pathconvert>
    <property name="urlRepos" value="file:///${testReposPath}" />  
 
    <!-- we checkout it to workingcopy -->
    <delete dir="workingcopy" includeemptydirs="true" failonerror="false"/>
    <mkdir dir="workingcopy"/>
    <svn refid="defaultsettings">
      <checkout url="${urlRepos}" destPath="workingcopy" />
    </svn>
  </target>

  <!-- init-selectors is run before each test for file selectors, since they all
    share the same model of a working copy -->
  <target name="init-selectors" depends="init">
    <echo message="javahl = ${javahl}  javasvn = ${javasvn}"/>
    <copy todir="workingcopy">
      <fileset dir="model/selectorTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <!-- Normal files -->
      <add file="workingcopy/normal1.txt"/>
      <add file="workingcopy/normal2.txt"/>
      <commit file="workingcopy/normal1.txt" message="normal file"/>
      <commit file="workingcopy/normal2.txt" message="normal file"/>
        
      <!-- Added files -->
      <add file="workingcopy/added1.txt"/>
      <add file="workingcopy/added2.txt"/>
      
      <!-- Deleted files -->
      <add file="workingcopy/deleted1.txt"/>
      <add file="workingcopy/deleted2.txt"/>
      <commit file="workingcopy/deleted1.txt" message="deleted file"/>
      <commit file="workingcopy/deleted2.txt" message="deleted file"/>
      <delete file="workingcopy/deleted1.txt"/>
      <delete file="workingcopy/deleted2.txt"/>
        
      <!-- Missing files (part 1 of 2) -->
      <add file="workingcopy/missing1.txt"/>
      <add file="workingcopy/missing2.txt"/>
      <commit file="workingcopy/missing1.txt" message="missing file"/>
      <commit file="workingcopy/missing2.txt" message="missing file"/>
      
      <!-- Modified files (part 1 of 2) -->
      <add file="workingcopy/modified1.txt"/>
      <add file="workingcopy/modified2.txt"/>
      <commit file="workingcopy/modified1.txt" message="modified file"/>
      <commit file="workingcopy/modified2.txt" message="modified file"/>
      
      <!-- Ignored files -->
      <ignore file="workingcopy/ignored1.txt"/>
      <ignore file="workingcopy/ignored2.txt"/>

      <!-- Conflicted files (part 1 of 2) -->
      <add file="workingcopy/conflicted1.txt"/>
      <add file="workingcopy/conflicted2.txt"/>
      <commit file="workingcopy/conflicted1.txt" message="conflicted file"/>
      <commit file="workingcopy/conflicted2.txt" message="conflicted file"/>

      <!-- Replaced files (part 1 of 2) -->
      <add file="workingcopy/replaced1.txt"/>
      <add file="workingcopy/replaced2.txt"/>
      <commit file="workingcopy/replaced1.txt" message="replaced file"/>
      <commit file="workingcopy/replaced2.txt" message="replaced file"/>
      <delete file="workingcopy/replaced1.txt"/>
      <delete file="workingcopy/replaced2.txt"/>
    </svn>
    
      <!-- Checkout a second working copy -->
      <mkdir dir="workingcopy2"/>
      <svn refid="defaultsettings">
        <checkout url="${urlRepos}" destPath="workingcopy2" />
      </svn>
    
    <!-- Conflicted files (part 2 of 2) -->
    <copy file="workingcopy/conflicted_v1.txt" tofile="workingcopy/conflicted1.txt" overwrite="true"/>
    <copy file="workingcopy/conflicted_v1.txt" tofile="workingcopy/conflicted2.txt" overwrite="true"/>
    <copy file="workingcopy/conflicted_v2.txt" tofile="workingcopy2/conflicted1.txt" overwrite="true"/>
    <copy file="workingcopy/conflicted_v2.txt" tofile="workingcopy2/conflicted2.txt" overwrite="true"/>
      <svn refid="defaultsettings">
        <commit message="conflicted file" file="workingcopy2/conflicted1.txt" />
        <commit message="conflicted file" file="workingcopy2/conflicted2.txt" />
        <update file="workingcopy/conflicted1.txt" />
        <update file="workingcopy/conflicted2.txt" />
      </svn>
    <delete file="workingcopy/conflicted_v1.txt"/>
    <delete file="workingcopy/conflicted_v2.txt"/>
    <delete>
      <fileset dir="workingcopy">
        <include name="conflicted1.txt.*"/>
        <include name="conflicted2.txt.*"/>
      </fileset>
    </delete>
    
    <!-- Missing files (part 2 of 2) -->
    <delete file="workingcopy/missing1.txt"/>
    <delete file="workingcopy/missing2.txt"/>

    <!-- Modified files (part 2 of 2) -->
    <copy file="workingcopy/normal1.txt" tofile="workingcopy/modified1.txt" overwrite="true"/>
    <copy file="workingcopy/normal2.txt" tofile="workingcopy/modified2.txt" overwrite="true"/>

    <!-- Replaced files (part 2 of 2) -->
    <copy file="workingcopy/normal1.txt" tofile="workingcopy/replaced1.txt" overwrite="true"/>
    <copy file="workingcopy/normal2.txt" tofile="workingcopy/replaced2.txt" overwrite="true"/>
    <svn refid="defaultsettings">
      <add file="workingcopy/replaced1.txt"/>
      <add file="workingcopy/replaced2.txt"/>
    </svn>
  </target>

  <!-- this test does not test svnant but svnClientAdapter -->
  <target name="testList" depends="init">
    <copy todir="workingcopy/listTest">
      <fileset dir="model/listTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/listTest"/>
      <commit dir="workingcopy/listTest" message="listTest directory added to repository"/> 
    </svn>
  </target>

  <target name="testLog" depends="init">
    <copy todir="workingcopy/logTest">
      <fileset dir="model/logTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/logTest"/>
      <commit dir="workingcopy/logTest" message="logTest directory added to repository"/> 
    </svn>
    <svn refid="defaultsettings">
      <log
        destFile="workingcopy/log.xml"
        path="workingcopy/logTest"
        stopOnCopy="true"
        asXml="true"
        startRevision="HEAD"
        stopRevision="1"
        />      
      <log
        destFile="workingcopy/log.txt"
        path="workingcopy/logTest"
        stopOnCopy="false"
        asXml="false"
        startRevision="BASE"
        stopRevision="1"
        />
    </svn>
  </target>

  <target name="testCheckout" depends="init">
    <copy todir="workingcopy/checkoutTest">
      <fileset dir="model/checkoutTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/checkoutTest"/>
      <commit dir="workingcopy/checkoutTest" message="checkoutTest directory added to repository"/>
      <checkout url="${urlRepos}" revision="HEAD" destPath="coHEAD" />
      <checkout url="${urlRepos}" revision="0" destPath="co0" />
    </svn>
  </target>

  <target name="testListCommand" depends="init">
    <copy todir="workingcopy/listCommandTest">
      <fileset dir="model/listCommandTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/listCommandTest"/>
      <commit dir="workingcopy/listCommandTest" message="listCommandTest directory added to repository"/>
      <checkout url="${urlRepos}" revision="HEAD" destPath="coHEAD" />
      <list url="${urlRepos}/listCommandTest" property="immediatecontent" recurse="false"/>
      <list url="${urlRepos}/listCommandTest" property="recursivecontent" recurse="true"/>
    </svn>
    <echo>IMMEDIATE: ${immediatecontent}</echo>
    <echo>RECURSIVE: ${recursivecontent}</echo>
  </target>

  <target name="testAddCommit" depends="init">
    <copy todir="workingcopy/addCommitTest">
      <fileset dir="model/addCommitTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add>
        <fileset dir="workingcopy">
          <include name="**/*.add"/>
        </fileset>
      </add> 
      <commit message="commit added files">
        <fileset dir="workingcopy">
          <include name="**/*.add"/>
          <exclude name="**/donotcommit.*"/>
        </fileset>
      </commit>
    </svn>
  </target>

  <target name="testCleanup" depends="init">
    <echo file="workingcopy/.svn/lock">test</echo>
    <svn refid="defaultsettings">
        <cleanup dir="workingcopy" />
    </svn>
  </target> 

  <target name="testCopy" depends="init">
    <copy todir="workingcopy/copyTest">
      <fileset dir="model/copyTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/copyTest"/>
      <commit message="copyTest added" dir="workingcopy/copyTest"/>
      
      <copy srcPath="workingcopy/copyTest/toCopy" destPath="workingcopy/copyTest/copy1" />
      <commit message="commit moved files" dir="workingcopy/copyTest"/>
      <copy srcUrl="${urlRepos}/copyTest/toCopy" destUrl="${urlRepos}/copyTest/copy2" message="directory copied" />
    </svn>
  </target>

  <target name="testDelete" depends="init">
    <copy todir="workingcopy/deleteTest">
      <fileset dir="model/deleteTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/deleteTest"/>
      <commit message="deleteTest added" dir="workingcopy/deleteTest"/>
    
      <delete url="${urlRepos}/deleteTest/deleteFromRepository" message="deleted for test" />
      <delete>
        <fileset dir="workingcopy/deleteTest">
          <include name="**/*.del"/>
        </fileset>
      </delete>
      <commit message="commit deleted files" dir="workingcopy/deleteTest"/>
    </svn>
  </target>

  <target name="testExport" depends="init">
    <copy todir="workingcopy/exportTest">
      <fileset dir="model/exportTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/exportTest"/>
      <commit message="exportTest added" dir="workingcopy/exportTest"/>
      <export srcUrl="${urlRepos}" revision="1" destPath="export1"/>
    </svn>
  </target>

  <target name="testImport" depends="init">
    <svn refid="defaultsettings">
      <import url="${urlRepos}/" path="model/importTest" message="importTest imported"/>
    </svn>
    <svn refid="defaultsettings">
      <checkout url="${urlRepos}" revision="HEAD" destPath="workingcopy/testImport" />
    </svn>
  </target>

  <target name="testImportNewEntry" depends="init">
    <svn refid="defaultsettings">
      <import url="${urlRepos}/" newEntry="new" path="model/importTest" message="importTest imported"/>
    </svn>
    <svn refid="defaultsettings">
      <checkout url="${urlRepos}" revision="HEAD" destPath="workingcopy/testImportNewEntry" />
    </svn>
  </target>

  <target name="testMkdir" depends="init">
    <copy todir="workingcopy/mkdirTest">
      <fileset dir="model/mkdirTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/mkdirTest"/>
      <commit message="mkdirTest added" dir="workingcopy/mkdirTest"/>
      <mkdir url="${urlRepos}/mkdirTest/testMkdir1" message="test mkdir 1"/>
      <mkdir path="workingcopy/mkdirTest/testMkdir2"/>
      <commit dir="workingcopy/mkdirTest/testMkdir2" message="test mkdir 2"/>
    </svn>
  </target>

  <target name="testMove" depends="init">
    <copy todir="workingcopy/moveTest">
      <fileset dir="model/moveTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/moveTest"/>
      <commit message="moveTest added" dir="workingcopy/moveTest"/>
      <move srcpath="workingcopy/moveTest/dir1ToRename" destpath="workingcopy/moveTest/dir1Renamed"/>
      <move srcUrl="${urlRepos}/moveTest/dir2ToRename" 
            destUrl="${urlRepos}/moveTest/dir2Renamed"
            message="dir renamed"/>
      <commit dir="workingcopy/moveTest" message="dir1 renamed"/>
    </svn>
  </target>

  <target name="testProp" depends="init">
    <copy todir="workingcopy/propTest">
      <fileset dir="model/propTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/propTest"/>
      <commit message="propTest added" dir="workingcopy/propTest"/>
    
      <propset path="workingcopy/propTest/file.png" name="svn:mime-type" value="image/png"/>
      <propset path="workingcopy/propTest/file.png" name="myPicture" file="workingcopy/propTest/icon.gif"/>
      <propset path="workingcopy/propTest/file.png" name="myProperty" value="myvalue"/>
      <propdel path="workingcopy/propTest/file.png" name="myProperty"/>

      <propget path="workingcopy/propTest/file.png" name="svn:mime-type" property="propTest.mimeType"/>
      <propget url="${urlRepos}/propTest/file.png" name="svn:mime-type" property="propTestUrlBeforeCommit.mimeType"/>
      <propget path="workingcopy/propTest/file.png" name="myPicture" file="workingcopy/propTest/icon2.gif"/>
      <commit message="propTest added" dir="workingcopy/propTest"/>
      <propget url="${urlRepos}/propTest/file.png" name="svn:mime-type" property="propTestUrlAfterCommit.mimeType"/>
    </svn>
  </target>

  <target name="testPropgetInvalidProp" depends="init">
    <copy todir="workingcopy/propgetInvalidPropTest">
      <fileset dir="model/propgetInvalidPropTest"></fileset>
    </copy>
    
    <svn refid="defaultsettings">
      <add dir="workingcopy/propgetInvalidPropTest"/>
      <commit message="propgetInvalidPropTest added" dir="workingcopy/propgetInvalidPropTest"/>
        
      <propget 
        path="workingcopy/propgetInvalidPropTest/test.txt" 
        name="svn:mime-type" 
        property="propgetInvalidProp.mime"/>
    </svn>
      
    <echo>propgetInvalidProp.mime: ${propgetInvalidProp.mime}</echo>
  </target>

  <target name="testDiff" depends="init">
    <copy todir="workingcopy/diffTest">
      <fileset dir="model/diffTest"></fileset>
    </copy>
    <copy file="workingcopy/diffTest/file.txt.version1" tofile="workingcopy/diffTest/file.txt"/>
    <svn refid="defaultsettings">
      <add dir="workingcopy/diffTest" recurse="false"/>
      <add file="workingcopy/diffTest/file.txt"/>
      <commit dir="workingcopy/diffTest" message="diffTest/file.txt added to repository"/>
    </svn>
    <copy file="workingcopy/diffTest/file.txt.version2" tofile="workingcopy/diffTest/file.txt" overwrite="true"/>    
    <svn refid="defaultsettings">
      <diff oldPath="workingcopy/diffTest/file.txt" outFile="workingcopy/diffTest/patch.txt"/>
    </svn>
  </target>

  <target name="testKeywords" depends="init">
    <copy todir="workingcopy/keywordsTest">
      <fileset dir="model/keywordsTest"></fileset>
    </copy>
    <svn refid="nopassword">
      <add dir="workingcopy/keywordsTest"/>
      <keywordsset file="workingcopy/keywordsTest/file.txt" keywords="LastChangedRevision"/> 
      <keywordsadd file="workingcopy/keywordsTest/file.txt" keywords="Author Id"/>
      <keywordsremove file="workingcopy/keywordsTest/file.txt" keywords="Id"/>
      <commit dir="workingcopy/keywordsTest" message="file.txt commited"/>
    </svn>
  </target>
  
  <target name="testUpdate" depends="init">
    <copy todir="workingcopy/updateTest">
      <fileset dir="model/updateTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/updateTest"/>
      <commit dir="workingcopy/updateTest" message="updateTest directory added to repository"/>
      <checkout url="${urlRepos}" destPath="coHEAD" />
    </svn>
      <copy file="workingcopy/updateTest/file1.txt" tofile="workingcopy/updateTest/file.txt" />
    <svn refid="defaultsettings">
      <add file="workingcopy/updateTest/file.txt"/>
      <commit dir="workingcopy/updateTest" message="updateTest/file.txt added to repository"/>
    </svn>
    <svn refid="defaultsettings">
      <update dir="coHEAD"/>
    </svn>
    <copy file="workingcopy/updateTest/file2.txt"  tofile="workingcopy/updateTest/file.txt" />
    <svn refid="defaultsettings">
      <commit dir="workingcopy/updateTest" message="updateTest/file.txt modified"/>
    </svn>
    <svn refid="defaultsettings">
      <update dir="coHEAD/updateTest"/>
    </svn>
  </target>

  <target name="testRevert" depends="init">
    <copy todir="workingcopy/revertTest">
      <fileset dir="model/revertTest"></fileset>
    </copy>
    <copy file="workingcopy/revertTest/file.txt.version1" tofile="workingcopy/revertTest/file.txt"/>
    <svn refid="defaultsettings">
      <add dir="workingcopy/revertTest" recurse="false"/>
      <add file="workingcopy/revertTest/file.txt"/>
      <commit dir="workingcopy/revertTest" message="revertTest/file.txt added to repository"/>
    </svn>
    <copy file="workingcopy/revertTest/file.txt.version2" tofile="workingcopy/revertTest/file.txt" overwrite="true"/>
    <svn refid="defaultsettings">
      <revert file="workingcopy/revertTest/file.txt"/>
    </svn>
  </target>

  <target name="testCat" depends="init">
    <copy todir="workingcopy/catTest">
      <fileset dir="model/catTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/catTest"/>
      <commit message="catTest added" dir="workingcopy/catTest"/>
      <cat url="${urlRepos}/catTest/file.txt" destFile="workingcopy/catTest/filecat.txt"/>
    </svn>  
  </target>

  <target name="testListener" depends="init">
    <copy todir="workingcopy/listenerTest">
      <fileset dir="model/listenerTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/listenerTest"/>
      <commit message="listenerTest added" dir="workingcopy/listenerTest"/>
    </svn>      
  </target>

  <target name="testStatus" depends="init">
    <copy todir="workingcopy/statusTest">
      <fileset dir="model/statusTest"></fileset>
    </copy>
    <svn refid="formatteddate">
      <add dir="workingcopy/statusTest" recurse="false"/>
      <commit dir="workingcopy/statusTest" message="statusTest committed" recurse="false"/>
      <add dir="workingcopy/statusTest/managedDir" recurse="false"/>
      <commit dir="workingcopy/statusTest/managedDir" message="statusTest/managedDir committed" recurse="false"/>
      
      <add file="workingcopy/statusTest/added.txt"/>
      <ignore file="workingcopy/statusTest/ignored.txt"/>
      <add file="workingcopy/statusTest/committed.txt"/>
      <commit file="workingcopy/statusTest/committed.txt" message="committed"/>
      <add file="workingcopy/statusTest/deleted.txt"/>
      <commit file="workingcopy/statusTest/deleted.txt" message="this file will be deleted"/>
      <delete file="workingcopy/statusTest/deleted.txt"/>
      
      <add file="workingcopy/statusTest/managedDir/added in managed dir.txt"/>
      
      <checkout url="${urlRepos}/statusTest" revision="HEAD" destPath="workingcopy/statusTest/nonManaged.dir/statusTest" recurse="false" />
      
      <status path="workingcopy/statusTest/added.txt" 
        textStatusProperty="a_testStatus.textStatus"
        propStatusProperty="a_testStatus.propStatus"
        lastChangedRevisionProperty="a_testStatus.lastCommitRevision"
        revisionProperty="a_testStatus.revision"
        lastCommitAuthorProperty="a_testStatus.lastCommitAuthor"
        lastChangedDateProperty="a_testStatus.lastChangedDate"
        urlProperty="a_testStatus.url"
      />
      <status path="workingcopy/statusTest/committed.txt" 
        textStatusProperty="testStatus.textStatus"
        propStatusProperty="testStatus.propStatus"
        lastChangedRevisionProperty="testStatus.lastCommitRevision"
        revisionProperty="testStatus.revision"
        lastCommitAuthorProperty="testStatus.lastCommitAuthor"
        lastChangedDateProperty="testStatus.lastChangedDate"
        urlProperty="testStatus.url"
      />
      <wcVersion path="workingcopy/statusTest" prefix="wc."/>
    </svn>
    <!-- we try with a long username -->
    <svn refid="nopassword-cedric">
      <add dir="workingcopy/statusTest/longUserName.dir"/>
      <commit dir="workingcopy/statusTest/longUserName.dir" message="longUserName committed"/>
    </svn>
  </target>

  <target name="testWcVersionUnmanaged" depends="init">
    <copy todir="workingcopy/wcversionTest">
      <fileset dir="model/wcversionTest"></fileset>
    </copy>
    <svn refid="nopassword-cedric">
      <wcversion path="workingcopy/wcversionTest"/>
    </svn>
    <echo>REVISIONMAX: ${revision.max}</echo>
  </target>
  
  <target name="testStatusUnmanaged" depends="init">
  <!-- Test to verify issue#408, where status of a file not under 
     source control generates a NPE -->
    <copy todir="workingcopy/statusUnmanagedTest">
      <fileset dir="model/statusUnmanagedTest"></fileset>
    </copy>
    
    <svn refid="defaultsettings">
    <add dir="workingcopy/statusUnmanagedTest" recurse="false"/>
    <add dir="workingcopy/statusUnmanagedTest/managedDir" recurse="true"/>
    <commit dir="workingcopy/statusUnmanagedTest" message="statusUnmanagedTest committed" recurse="true"/>
    
    <status path="workingcopy/statusUnmanagedTest/unmanaged1.txt" 
      textStatusProperty="unmanaged1.textStatus"
      propStatusProperty="unmanaged1.propStatus"
      lastChangedRevisionProperty="unmanaged1.lastCommitRevision"
      revisionProperty="unmanaged1.revision"
      lastCommitAuthorProperty="unmanaged1.lastCommitAuthor"
      urlProperty="unmanaged1.url"
      />
    <status path="workingcopy/statusUnmanagedTest/unmanagedDir" 
      textStatusProperty="unmanagedDir.textStatus"
      propStatusProperty="unmanagedDir.propStatus"
      lastChangedRevisionProperty="unmanagedDir.lastCommitRevision"
      revisionProperty="unmanagedDir.revision"
      lastCommitAuthorProperty="unmanagedDir.lastCommitAuthor"
      urlProperty="unmanagedDir.url"
      />
    <status path="workingcopy/statusUnmanagedTest/unmanagedDir/unmanaged2.txt" 
      textStatusProperty="unmanaged2.textStatus"
      propStatusProperty="unmanaged2.propStatus"
      lastChangedRevisionProperty="unmanaged2.lastCommitRevision"
      revisionProperty="unmanaged2.revision"
      lastCommitAuthorProperty="unmanaged2.lastCommitAuthor"
      urlProperty="unmanaged2.url"
      />
    </svn>
    <echo>unmanaged1.textStatus: ${unmanaged1.textStatus}</echo>
    <echo>unmanaged1.propStatus: ${unmanaged1.propStatus}</echo>
    <echo>unmanaged1.lastCommitRevision: ${unmanaged1.lastCommitRevision}</echo>
    <echo>unmanaged1.revision: ${unmanaged1.revision}</echo>
    <echo>unmanaged1.lastCommitAuthor: ${unmanaged1.lastCommitAuthor}</echo>
    <echo>unmanaged1.url: ${unmanaged1.url}</echo>
    <echo>unmanagedDir.textStatus: ${unmanagedDir.textStatus}</echo>
    <echo>unmanagedDir.propStatus: ${unmanagedDir.propStatus}</echo>
    <echo>unmanagedDir.lastCommitRevision: ${unmanagedDir.lastCommitRevision}</echo>
    <echo>unmanagedDir.revision: ${unmanagedDir.revision}</echo>
    <echo>unmanagedDir.lastCommitAuthor: ${unmanagedDir.lastCommitAuthor}</echo>
    <echo>unmanagedDir.url: ${unmanagedDir.url}</echo>
    <echo>unmanaged2.textStatus: ${unmanaged2.textStatus}</echo>
    <echo>unmanaged2.propStatus: ${unmanaged2.propStatus}</echo>
    <echo>unmanaged2.lastCommitRevision: ${unmanaged2.lastCommitRevision}</echo>
    <echo>unmanaged2.revision: ${unmanaged2.revision}</echo>
    <echo>unmanaged2.lastCommitAuthor: ${unmanaged2.lastCommitAuthor}</echo>
    <echo>unmanaged2.url: ${unmanaged2.url}</echo>
  </target>

  
  <target name="testIgnore" depends="init">
    <copy todir="workingcopy/ignoreTest">
      <fileset dir="model/ignoreTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/ignoreTest" recurse="false"/>
      <add dir="workingcopy/ignoreTest/dir1" recurse="false"/>
      <add dir="workingcopy/ignoreTest/dir1/dir2" recurse="false"/>      
      <commit message="committed" dir="workingcopy/ignoreTest"/>
      <ignore file="workingcopy/ignoreTest/fileToIgnore.txt"/>
      <ignore dir="workingcopy/ignoreTest/dir1" pattern="*.ignore" recurse="true"/>
    </svn>
  </target>

  <!-- this test does not test svnant but svnClientAdapter -->
  <target name="testEntry" depends="init">
    <copy todir="workingcopy/entryTest">
      <fileset dir="model/entryTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/entryTest"/>
      <commit dir="workingcopy/entryTest" message="entryTest directory added to repository"/> 
    </svn>
  </target>

  <target name="testResolve" depends="init">
    <copy file="model/resolveTest/file.txt" todir="workingcopy/resolveTest"/>
    <svn refid="defaultsettings">
      <add dir="workingcopy/resolveTest"/>
      <commit dir="workingcopy/resolveTest" message="resolveTest directory added to repository"/> 
    </svn>  

    <mkdir dir="workingcopy2"/>
    <svn refid="defaultsettings">
      <checkout url="${urlRepos}" destPath="workingcopy2" />
    </svn>

    <echo file="workingcopy2/resolveTest/file.txt" append="true">line 4</echo> 
    <svn refid="defaultsettings">
      <commit dir="workingcopy2/resolveTest" message="file.txt modified"/>  
    </svn>  
    <echo file="workingcopy/resolveTest/file.txt" append="true">the next line</echo>
    <svn refid="defaultsettings">
      <update dir="workingcopy/resolveTest"/>     
    </svn>
    <!-- there is a conflict on workingcopy/resolveTest now -->
  </target>

  <target name="testAnnotate" depends="init">
    <!-- don't modify the indentation for echo ! -->
    <mkdir dir="workingcopy/annotateTest"/>
    <echo file="workingcopy/annotateTest/file.txt" append="false">line 1${line.separator}</echo>
    <svn refid="defaultsettings">
      <add dir="workingcopy/annotateTest"/>
      <commit dir="workingcopy/annotateTest" message="annotateTest directory added to repository"/> 
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 2${line.separator}</echo>
    <svn refid="nopassword-user1">
      <commit dir="workingcopy/annotateTest" message="modified"/> 
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 3${line.separator}</echo>
    <svn refid="nopassword-user2">
      <commit dir="workingcopy/annotateTest" message="modified"/> 
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 4${line.separator}</echo>
    <svn refid="nopassword-empty">
      <commit dir="workingcopy/annotateTest" message="modified"/> 
    </svn>      
  </target>

  <target name="testRepositoryRoot" depends="init"> 
    <mkdir dir="workingcopy/repositoryRootTest"/>
    <svn refid="defaultsettings">
      <add dir="workingcopy/repositoryRootTest"/>
      <commit dir="workingcopy/repositoryRootTest" message="repositoryRootTest directory added to repository"/> 
    </svn>      
  </target>

  <target name="testSwitch" depends="init">
    <copy todir="workingcopy/switchTest">
      <fileset dir="model/switchTest"></fileset>
    </copy>
    <!-- first create the branch -->
    <svn refid="defaultsettings">
      <add dir="workingcopy/switchTest"/>
      <commit dir="workingcopy/switchTest" message="switchTest directory added to repository"/> 
      <copy srcUrl="${urlRepos}/switchTest" destUrl="${urlRepos}/switchTestBranch" message="branched" />
    </svn>
    <!-- switch to the branch -->
    <svn refid="defaultsettings">
      <switch path="workingcopy/switchTest" url="${urlRepos}/switchTestBranch" revision="1"/>
    </svn>
  </target>
  
  <target name="testNormalSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnNormal refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
      
  <target name="testAddedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnAdded refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
        
  <target name="testUnversionedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnUnversioned refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
          
  <target name="testModifiedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnModified refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
          
  <target name="testIgnoredSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnIgnored refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
          
  <target name="testConflictedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnConflicted refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
          
  <target name="testReplacedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnReplaced refid="no-credentials"/>
      </fileset>
    </copy>
  </target>

  <target name="testEmbeddedSelector" depends="init-selectors">
    <mkdir dir="test"/>
    <svn refid="defaultsettings">
      <add>
        <fileset dir="workingcopy">
          <svnUnversioned refid="no-credentials"/>
        </fileset>
      </add>
    </svn>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnUnversioned refid="no-credentials"/>
      </fileset>
    </copy>
  </target>

  <target name="testAddSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/addSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/normal1.txt"/>
      <add file="workingcopy/normal2.txt"/>
      <commit file="workingcopy/normal1.txt" message="ci"/>
      <commit file="workingcopy/normal2.txt" message="ci"/>
    </svn>
    
    <!-- Perform test -->
    <svn refid="defaultsettings">
      <add>
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnUnversioned refid="no-credentials"/>
        </svnFileSet>
      </add>
    </svn>
    
    <!-- Verify -->
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnAdded refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
  
  <target name="testCommitSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/commitSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file2.txt"/>
      <add dir="workingcopy/dir1"/>
    </svn>
    
    <!-- Perform test -->
    <svn refid="defaultsettings">
      <commit message="ci">
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnAdded refid="no-credentials"/>
        </svnFileSet>
      </commit>
    </svn>
    
    <!-- Verify -->
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset dir="workingcopy">
        <svnNormal refid="no-credentials"/>
      </fileset>
    </copy>
  </target>
  
  <target name="testDeleteSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/deleteSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/normal1.txt"/>
      <add file="workingcopy/missing1.txt"/>
      <add dir="workingcopy/dir1"/>
      <commit file="workingcopy/normal1.txt" message="ci"/>
      <commit file="workingcopy/missing1.txt" message="ci"/>
      <commit dir="workingcopy/dir1" message="ci"/>
    </svn>
    <delete file="workingcopy/missing1.txt"/>
    <delete file="workingcopy/dir1/missing2.txt"/>
    
    <!-- Perform test -->
    <svn refid="defaultsettings">
      <delete>
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnMissing refid="no-credentials"/>
        </svnFileSet>
      </delete>
      <commit dir="workingcopy" message="ci"/>
    </svn>
    
    <!-- Verify -->
      <mkdir dir="workingcopy2"/>
      <svn refid="defaultsettings">
        <checkout url="${urlRepos}" destPath="workingcopy2" />
      </svn>
  </target>

  <target name="testKeywordsSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/keywordsSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file1.txt"/>
      <add dir="workingcopy/dir1"/>
      <commit file="workingcopy/file1.txt" message="ci"/>
      <commit dir="workingcopy/dir1" message="ci"/>
    </svn>
    
    <!-- Perform test -->
    <svn refid="defaultsettings">
      <keywordsset keywords="LastChangedRevision">
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnNormal refid="no-credentials"/>
        </svnFileSet>
      </keywordsset>
      <commit dir="workingcopy" message="ci"/>
    </svn>
  </target>

  <target name="testRevertSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/revertSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/normal1.txt"/>
      <add file="workingcopy/deleted1.txt"/>
      <add dir="workingcopy/dir1"/>
      <commit file="workingcopy/normal1.txt" message="ci"/>
      <commit file="workingcopy/deleted1.txt" message="ci"/>
      <commit dir="workingcopy/dir1" message="ci"/>
      <delete file="workingcopy/deleted1.txt"/>
      <delete file="workingcopy/dir1/deleted2.txt"/>
    </svn>
    
    <!-- Perform test -->
    <svn refid="defaultsettings">
      <revert>
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnDeleted refid="no-credentials"/>
        </svnFileSet>
      </revert>
    </svn>
  </target>

  <target name="testUpdateSvnFileSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/updateSvnFileSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/normal1.txt"/>
      <add file="workingcopy/missing1.txt"/>
      <add dir="workingcopy/dir1"/>
      <commit file="workingcopy/normal1.txt" message="ci"/>
      <commit file="workingcopy/missing1.txt" message="ci"/>
      <commit dir="workingcopy/dir1" message="ci"/>
    </svn>
    <delete file="workingcopy/missing1.txt"/>
    <delete file="workingcopy/dir1/missing2.txt"/>
    
    <!-- Perform test : update should restore missing files -->
    <svn refid="defaultsettings">
      <update>
        <svnFileSet dir="workingcopy" refid="no-credentials">
          <svnMissing refid="no-credentials"/>
        </svnFileSet>
      </update>
    </svn>
  </target>

  <target name="testSvnFileSetAsRefId" depends="init-selectors">
    <svnFileSet id="svnFileSetId_1" dir="workingcopy" refid="no-credentials">
      <svnAdded refid="no-credentials"/>
    </svnFileSet>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetId_1"/>
    </copy>
  </target>

  <target name="testSvnFileSetIncludes" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnFileSetIncludesTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file11.txt"/>
      <add file="workingcopy/file12.txt"/>
      <add dir="workingcopy/dir"/>
      <commit file="workingcopy/file11.txt" message="ci"/>
      <commit file="workingcopy/file12.txt" message="ci"/>
      <commit dir="workingcopy/dir" message="ci"/>
    </svn>

    <!-- Conduct Test -->
    <svnFileSet 
      id="svnFileSetIncludes" 
      dir="workingcopy" 
      includes="**/*1.txt"
      refid="no-credentials"/>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetIncludes"/>
    </copy>
  </target>
  
  <target name="testSvnFileSetExcludes" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnFileSetExcludesTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file11.txt"/>
      <add file="workingcopy/file12.txt"/>
      <add dir="workingcopy/dir"/>
      <commit file="workingcopy/file11.txt" message="ci"/>
      <commit file="workingcopy/file12.txt" message="ci"/>
      <commit dir="workingcopy/dir" message="ci"/>
    </svn>

    <!-- Conduct Test -->
    <svnFileSet 
      id="svnFileSetExcludes" 
      dir="workingcopy" 
      excludes="**/*1.txt"
      refid="no-credentials"/>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetExcludes"/>
    </copy>
  </target>

  <target name="testSvnFileSetNestedInclude" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnFileSetNestedIncludeTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file11.txt"/>
      <add file="workingcopy/file12.txt"/>
      <add dir="workingcopy/dir"/>
      <commit file="workingcopy/file11.txt" message="ci"/>
      <commit file="workingcopy/file12.txt" message="ci"/>
      <commit dir="workingcopy/dir" message="ci"/>
    </svn>

    <!-- Conduct Test -->
    <svnFileSet 
      id="svnFileSetNestedInclude" 
      dir="workingcopy" 
      refid="no-credentials">
      <include name="**/*1.txt"/>
    </svnFileSet>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetNestedInclude"/>
    </copy>
  </target>
  
  <target name="testSvnFileSetNestedExclude" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnFileSetNestedExcludeTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file11.txt"/>
      <add file="workingcopy/file12.txt"/>
      <add dir="workingcopy/dir"/>
      <commit file="workingcopy/file11.txt" message="ci"/>
      <commit file="workingcopy/file12.txt" message="ci"/>
      <commit dir="workingcopy/dir" message="ci"/>
    </svn>

    <!-- Conduct Test -->
    <svnFileSet 
      id="svnFileSetNestedExclude" 
      dir="workingcopy" 
      refid="no-credentials">
      <exclude name="**/*1.txt"/>
    </svnFileSet>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetNestedExclude"/>
    </copy>
  </target>

  <target name="testSvnFileSetPatternSet" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnFileSetPatternSetTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/file1.xml"/>
      <add file="workingcopy/file2.txt"/>
      <add dir="workingcopy/dir1"/>
      <add dir="workingcopy/dir2"/>
      <commit file="workingcopy/file1.xml" message="ci"/>
      <commit file="workingcopy/file2.txt" message="ci"/>
      <commit dir="workingcopy/dir1" message="ci"/>
      <commit dir="workingcopy/dir2" message="ci"/>
    </svn>

    <!-- Conduct Test -->
    <svnFileSet 
      id="svnFileSetPatternSet" 
      dir="workingcopy" 
      refid="no-credentials">
      <patternset>
        <include name="**/*.xml"/>
        <exclude name="**/dir2/**"/>
      </patternset>
    </svnFileSet>
    <mkdir dir="test"/>
    <copy todir="test">
      <fileset refid="svnFileSetPatternSet"/>
    </copy>
  </target>

  <target name="testInfoNoAttributes" depends="init">
    <svn refid="defaultsettings">
      <info />
    </svn>
  </target>

  <target name="testInfoDirectory" depends="init">
    <svn refid="defaultsettings">
      <info target="${basedir}/workingcopy"/>
    </svn>
  </target>

  <target name="testInfoFile" depends="init">
    <copy todir="workingcopy/infoTest">
      <fileset dir="model/infoTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/infoTest"/>
      <commit dir="workingcopy/infoTest" message="infoTest directory added to repository"/> 
    </svn>
    <svn refid="defaultsettings">
      <info target="${basedir}/workingcopy/infoTest/file1.txt"/>
    </svn>
  </target>

  <target name="testSingleInfo" depends="init">
    <copy todir="workingcopy/singleInfoTest">
      <fileset dir="model/singleInfoTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/singleInfoTest"/>
      <commit dir="workingcopy/singleInfoTest" message="singleInfoTest directory added to repository"/> 
    </svn>
    <svn refid="defaultsettings">
      <singleinfo target="${basedir}/workingcopy/singleInfoTest/file1.txt" property="val_revision" request="revision"/>
      <singleinfo target="${basedir}/workingcopy/singleInfoTest/file1.txt" property="val_name"     request="name"/>
    </svn>
  </target>

  <target name="testInfoBadFile" depends="init">
    <svn refid="defaultsettings">
      <info target="${basedir}/fakefile.txt"/>
    </svn>
  </target>

  <target name="testInfoCustomPrefix" depends="init">
    <svn refid="defaultsettings">
      <info target="${basedir}/workingcopy" propPrefix="wc.info" />
    </svn>
  </target>
  
  <target name="testInfoCustomisedDateFormat" depends="init">
   <svn refid="formatteddate-german">
      <info target="${basedir}/workingcopy"/>
    </svn>
  </target>
  
  <target name="testInfoURL" depends="init">
    <copy todir="workingcopy/infoTest">
      <fileset dir="model/infoTest"></fileset>
    </copy>
    <svn refid="defaultsettings">
      <add dir="workingcopy/infoTest"/>
      <commit dir="workingcopy/infoTest" message="infoTest directory added to repository"/> 
      <info target="${urlRepos}/infoTest"/>
    </svn>
  </target>
  
  
  <target name="testSvnExists" depends="init">
    <!-- Prepare test -->
      <copy todir="workingcopy">
        <fileset dir="model/svnExistsTest"/>
      </copy>
    <svn refid="defaultsettings">
      <add file="workingcopy/added.txt"/>
      <add file="workingcopy/checkedin.txt"/>
      <commit file="workingcopy/checkedin.txt" message="ci"/>
    </svn>

    <property name="workingcopy.dir" location="workingcopy"/>
    
    <!-- Conduct Test -->
    <condition property="svnExists.local.checkedin" value="true">
      <svnExists refid="no-credentials" target="${workingcopy.dir}/checkedin.txt"/>
    </condition>
    <echo>svnExists.local.checkedin: ${svnExists.local.checkedin}</echo>
    
    <condition property="svnExists.local.added" value="true">
      <svnExists refid="no-credentials" target="${workingcopy.dir}/added.txt"/>
    </condition>
    <echo>svnExists.local.added: ${svnExists.local.added}</echo>
    
    <condition property="svnExists.local.private" value="true">
      <svnExists refid="no-credentials" target="${workingcopy.dir}/private.txt"/>
    </condition>
    <echo>svnExists.local.private: ${svnExists.local.private}</echo>
    
    <condition property="svnExists.local.inexistant" value="true">
      <svnExists refid="no-credentials" target="${workingcopy.dir}/inexistant.txt"/>
    </condition>
    <echo>svnExists.local.inexistant: ${svnExists.local.inexistant}</echo>
    
    <condition property="svnExists.server.checkedin" value="true">
      <svnExists refid="no-credentials" target="${urlRepos}/checkedin.txt"/>
    </condition>
    <echo>svnExists.server.checkedin: ${svnExists.server.checkedin}</echo>
    
    <condition property="svnExists.server.added" value="true">
      <svnExists refid="no-credentials" target="${urlRepos}/added.txt"/>
    </condition>
    <echo>svnExists.server.added: ${svnExists.server.added}</echo>
    
    <condition property="svnExists.server.private" value="true">
      <svnExists refid="no-credentials" target="${urlRepos}/private.txt"/>
    </condition>
    <echo>svnExists.server.private: ${svnExists.server.private}</echo>
    
  </target>

  <target name="all" depends="init">
  </target>
  
</project>
