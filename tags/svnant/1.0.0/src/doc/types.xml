<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE types [
	<!ENTITY common_params SYSTEM "javahl_javasvn.txt">
]>

<ant:types 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:ant="http://www.fiset.ca/ant-docs/v1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.fiset.ca/ant-docs/v1 ant-types.xsd" 
	>
	<ant:title>Svn Types</ant:title>
	
	<ant:introduction>
		<p>
			This document describes the type extensions that svn-ant brings to Ant. To use those types,
			you must first obtain a copy of svnant.jar, add it to the classpath of your ant project
			and define the types. Fortunately, there is a resource file, within the distributed JAR file,
			and all those steps can be accomplished with the following code:
			<ant:example>
				<![CDATA[
<path id="svnant.classpath">
  <pathelement location="${svnant.dir}/lib/svnant.jar" />
  <pathelement location="${svnant.dir}/lib/svnClientAdapter.jar" />
</path>  

<typedef resource="svntypes.xml" classpathref="project.classpath"/>
				]]>
			</ant:example>
		</p>
		<p>
			If you are upgrading from an earlier version of svnAnt, and the following line was used
			in your <i>build.xml</i> file, then replace it with the ones above.
			<ant:example>
				<![CDATA[
<taskdef resource="svntask.properties" classpathref="svnant.classpath"/>
				]]>
			</ant:example>
		</p>
		<h3><a name="bindings">Bindings</a></h3>
		<p>
			All types offer two parameters: <b>javahl</b> and <b>javasvn</b>. Those parameters
			are booleans, which means their values can be set to either <b>true</b> or <b>false</b>. 
			If not specified, those parameters are assumed to be set (true). These two parameters are used
			to select which client is used to access Subversion.
		</p>
		<p>
			There are three clients used by svnAnt to access Subversion:
			<ul>
				<li>JavaHL;</li>
				<li>JavaSVN; and,</li>
				<li>Command Line Interface.</li>
			</ul>
			To better understand the difference between those three clients, please refer to
			documentation on <b>svnClientAdapter.jar</b>.
		</p>
		<p>
			The property <b>javahl</b> is considered only if the javahl libraries are available. Similarly,
			the property <b>javasvn</b> is considered only if JavaSVN is present. Finally, <b>javahl</b>
			takes precedence over <b>javasvn</b>.
		</p>
		<p>
			To better illustrate the previous paragraph, use the following steps:
			<ol>
				<li>If <b>javahl</b> is <i>true</i> and JavaHL bindings are available, then JavaHL is used.</li>
				<li>If <b>javasvn</b> is <i>true</i> and JavaSVN is present, then JavaSVN is used.</li>
				<li>If the two previous tests failed, for any reason, then the Command Line Interface is used.</li>
			</ol>
		</p>
	</ant:introduction>
	
	<!-- *****************************
	     ***************************** -->
	<ant:type name="svnFileSet" className="org.tigris.subclipse.svnant.SvnFileSet">
		<ant:shortDescription>FileSet replacement that operates on list of files obtained from Subversion.</ant:shortDescription>
		<ant:fullDescription>
			<p>
				This type implements a FileSet. Instances of FileSet are used in tasks that operates on a number of files. The files
				selected by a FileSet can be tailored by a number of patterns and selectors. More information about file sets is available
				with the Ant documentation.
			</p>
			<p>
				The motivation with creating a replacement FileSet that is based on Subversion was to have the ability of creating
				sets of files that include deleted and missing files. In fact, the classic fileset operates only on files that are reported
				by the file system and can not predict deleted and missing files. Furthermore, there are useful commands that can be performed
				on deleted and missing files, such as 'revert', 'delete', 'update' and others.
			</p>
			<p>
				At the present time, <b>svnFileSet</b> is experimental. It supports selectors but it does not yet accept any patterns 
				(include, exclude). Those enhancments are to come later.
			</p>
			<p>
				<b>svnFileSet</b> can be used within any svn-ant task that supports a nested file sets. It can also be used in any task
				that is based on a file set. If you have a problem using <b>svnFileSet</b> within a task that works well with the classic
				fileset, then report the problem to the author of the task. However, for the time being, there is a work around your 
				problem. Instead of using a <b>svnFileSet</b> directly in the targeted task, use it indirectly via a classic fileset and
				a reference. For example, if ANT complains about a task similar to the following:
				<ant:example>
<![CDATA[
<target name="example">
	<mkdir dir="test"/>
	<copy todir="test">
		<svnFileSet dir="workingcopy">
			<svnAdded/>
		</svnFileSet>
	</copy>
</target>
]]>					
				</ant:example>
				
				you can rewrite it, using a reference, as:
				
				<ant:example>
<![CDATA[
<target name="example">
	<svnFileSet id="svnFileSetId_1" dir="workingcopy">
		<svnAdded/>
	</svnFileSet>
	<mkdir dir="test"/>
	<copy todir="test">
		<fileset refid="svnFileSetId_1"/>
	</copy>
</target>
]]>					
				</ant:example>
			</p>
			<p> 
				If you are the author of a fileset-based task and that you can not understand 
				why your task does not accept <b>svnFileSet</b> while it works perfectly well 
				with the classic fileset, here is a thing you can check. If your task
				accepts instances of FileSet with a method similar to:
				<ant:example>
<![CDATA[
public void addFileset(FileSet set) {
	...
}
]]>					
				</ant:example>
				then adding the following method should fix the problem:
				<ant:example>
<![CDATA[
public void add(FileSet set) {
	addFileSet(set);
}
]]>					
				</ant:example>
			</p>
			<h3>Examples</h3>
			<p>
				The following ant script can be used to remove all missing files from the associated repository:
				<ant:example>
<![CDATA[
<svn>
	<delete>
		<svnFileSet dir="workingcopy">
			<svnMissing/>
		</svnFileSet>
	</delete>
	<commit 
		dir="workingcopy" 
		message="automatically removing missing files"/>
</svn>
]]>					
				</ant:example>
			</p>
			<p>
				The following ant script can be used to add all new files to the associated repository:
				<ant:example>
<![CDATA[
<svn>
	<add>
		<svnFileSet dir="workingcopy">
			<svnUnversioned/>
		</svnFileSet>
	</add>
	<commit
		dir="workingcopy" 
		message="automatically adding files"/>
</svn>
]]>					
				</ant:example>
			</p>
			<p>
				The following ant script can be used to restore all deleted files:
				<ant:example>
<![CDATA[
<svn>
	<revert>
		<svnFileSet dir="workingcopy">
			<svnDeleted/>
		</svnFileSet>
	</revert>
</svn>
]]>					
				</ant:example>
			</p>
			<p>
				If, in the previous example, you wanted svn-ant to use the command line adapter:
				<ant:example>
<![CDATA[
<svn javahl="false" javasvn="false">
	<revert>
		<svnFileSet 
			dir="workingcopy" 
			javahl="false" 
			javasvn="false">
			<svnDeleted 
				javahl="false" 
				javasvn="false"/>
		</svnFileSet>
	</revert>
</svn>
]]>					
				</ant:example>
			</p>
		</ant:fullDescription>
		<!-- Parameters -->
		<ant:parameter name="dir">
			<ant:description>
				Specifies the root directory used by the file set. It should specify
				a directory managed by Subversion.
			</ant:description>
			<ant:required>
				Either dir or file must be specified
			</ant:required>
		</ant:parameter>
		<ant:parameter name="file">
			<ant:description>
				If used, specifies a fileset that contains a single file.
			</ant:description>
			<ant:required>
				Either dir or file must be specified
			</ant:required>
		</ant:parameter>
		<ant:parameter name="includes">
			<ant:description>
				Comma-seperated or space-separated list of patterns, which describe files that are 
				included. If this attribute if not specified, then all files are included.
			</ant:description>
			<ant:required>
				No
			</ant:required>
		</ant:parameter>
		<ant:parameter name="excludes">
			<ant:description>
				Comma-seperated or space-separated list of patterns, which describe files that are 
				excluded. If this attribute if not specified, then no files are excluded.
			</ant:description>
			<ant:required>
				No
			</ant:required>
		</ant:parameter>
		&common_params;
		<!-- Nested Types -->
		<ant:nestedType name="exclude">
			<ant:description>
				The type svnFileSet can include the nested type 'exclude', similar to a classic FileSet.
			</ant:description>
		</ant:nestedType>
		<ant:nestedType name="include">
			<ant:description>
				The type svnFileSet can include the nested type 'include', similar to a classic FileSet.
			</ant:description>
		</ant:nestedType>
		<ant:nestedType name="patternSet">
			<ant:description>
				The type svnFileSet can include the nested type 'patternSet', similar to a classic FileSet.
			</ant:description>
		</ant:nestedType>
		<ant:nestedType name="selector">
			<ant:description>
				The type svnFileSet can include the any file selector, such as <b>contains</b>, <b>date</b>
				<b>size</b>, or any <a href="selectors.html">file selector defined by svn-ant</a>
			</ant:description>
		</ant:nestedType>
	</ant:type>
	
</ant:types>