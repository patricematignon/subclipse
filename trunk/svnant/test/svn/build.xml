<?xml version="1.0"?>

<project name="svn-test" basedir="." default="all">
  
  <!--  all properties are in build.properties 
  --> 
  
  <property file="build.properties" /> 

  
  <path id="project.classpath">
    <pathelement location="${svnjavahl.jar}" /> 
    <pathelement location="${svnant.jar}" />
    <pathelement location="${svnClientAdapter.jar}"/>
  </path>  
  
  <taskdef resource="svntask.properties" classpathref="project.classpath"/>


  <target name="clean">
    <delete dir="workingcopy"/>
    <delete dir="workingcopy2"/>    
    <delete dir="coHEAD"/>
    <delete dir="co0"/>
    <delete dir="export1"/>
  </target>


 
  <!-- create the test repository -->
  <target name="createTestRepository">
    <echo>using svnadmin to create repositories (you need it in your path) ...</echo>
  	<delete dir="repository"/>  

  	<svn javahl="false">
  		<createRepository path="repository"/>
  	</svn>
  </target>


  <!-- init target is executed before each other "test"Target -->
  <target name="init" depends="clean, createTestRepository">

    <!-- if urlRepos is not defined in build.properties, we define it here 
       urlRepos is the url of the repository that will be used for most tests -->
    <property name="testReposLocation" location="repository" />
     <!-- we need / separator -->
    <pathconvert property="testReposPath" dirsep="/">
  	  <path path="${testReposLocation}"/>
    </pathconvert>
    <property name="urlRepos" value="file:///${testReposPath}" />  
 
    <!-- we checkout it to workingcopy -->
    <mkdir dir="workingcopy"/>
    <svn javahl="${javahl}">
      <checkout url="${urlRepos}" destPath="workingcopy" />
    </svn>
  </target>

  <!-- this test does not test svnant but svnClientAdapter -->
  <target name="testList" depends="init">
    <copy todir="workingcopy/listTest">
      <fileset dir="model/listTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/listTest"/>
      <commit dir="workingcopy/listTest" message="listTest directory added to repository"/>	
    </svn>
  </target>

  <!-- this test does not test svnant but svnClientAdapter -->
  <target name="testLog" depends="init">
    <copy todir="workingcopy/logTest">
      <fileset dir="model/logTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/logTest"/>
      <commit dir="workingcopy/logTest" message="logTest directory added to repository"/>	
    </svn>
  </target>

  <target name="testCheckout" depends="init">
    <copy todir="workingcopy/checkoutTest">
      <fileset dir="model/checkoutTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/checkoutTest"/>
      <commit dir="workingcopy/checkoutTest" message="checkoutTest directory added to repository"/>
			
      <checkout url="${urlRepos}" revision="HEAD" destPath="coHEAD" />
      <checkout url="${urlRepos}" revision="0" destPath="co0" />
    </svn>
  </target>

  <target name="testAddCommit" depends="init">
    <copy todir="workingcopy/addCommitTest">
      <fileset dir="model/addCommitTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add>
        <fileset dir="workingcopy">
          <include name="**/*.add"/>
        </fileset>
      </add> 
      <commit message="commit added files">
        <fileset dir="workingcopy">
          <include name="**/*.add"/>
          <exclude name="**/donotcommit.*"/>
        </fileset>
      </commit>
    </svn>
  </target>

  <target name="testCopy" depends="init">
    <copy todir="workingcopy/copyTest">
      <fileset dir="model/copyTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/copyTest"/>
      <commit message="copyTest added" dir="workingcopy/copyTest"/>
			
      <copy srcPath="workingcopy/copyTest/toCopy" destPath="workingcopy/copyTest/copy1" />
      <commit message="commit moved files" dir="workingcopy/copyTest"/>
      <copy srcUrl="${urlRepos}/copyTest/toCopy" destUrl="${urlRepos}/copyTest/copy2" message="directory copied" />
    </svn>
  </target>

  <target name="testDelete" depends="init">
    <copy todir="workingcopy/deleteTest">
      <fileset dir="model/deleteTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/deleteTest"/>
      <commit message="deleteTest added" dir="workingcopy/deleteTest"/>
		
      <delete url="${urlRepos}/deleteTest/deleteFromRepository" message="deleted for test" />
      <delete>
        <fileset dir="workingcopy/deleteTest">
          <include name="**/*.del"/>
        </fileset>
      </delete>
      <commit message="commit deleted files" dir="workingcopy/deleteTest"/>
    </svn>
  </target>

  <target name="testExport" depends="init">
    <copy todir="workingcopy/exportTest">
      <fileset dir="model/exportTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/exportTest"/>
      <commit message="exportTest added" dir="workingcopy/exportTest"/>
      <export srcUrl="${urlRepos}" revision="1" destPath="export1"/>
    </svn>
  </target>

  <target name="testImport" depends="init">
    <svn logLevel="3" javahl="${javahl}">
      <import url="${urlRepos}/" path="model/importTest" message="importTest imported"/>
    </svn>
  </target>

  <target name="testMkdir" depends="init">
    <copy todir="workingcopy/mkdirTest">
      <fileset dir="model/mkdirTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/mkdirTest"/>
      <commit message="mkdirTest added" dir="workingcopy/mkdirTest"/>
      <mkdir url="${urlRepos}/mkdirTest/testMkdir1" message="test mkdir 1"/>
      <mkdir path="workingcopy/mkdirTest/testMkdir2"/>
      <commit dir="workingcopy/mkdirTest/testMkdir2" message="test mkdir 2"/>
    </svn>
  </target>

  <target name="testMove" depends="init">
    <copy todir="workingcopy/moveTest">
      <fileset dir="model/moveTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/moveTest"/>
      <commit message="moveTest added" dir="workingcopy/moveTest"/>
      <move srcpath="workingcopy/moveTest/dir1ToRename" destpath="workingcopy/moveTest/dir1Renamed"/>
      <move srcUrl="${urlRepos}/moveTest/dir2ToRename" 
            destUrl="${urlRepos}/moveTest/dir2Renamed"
            message="dir renamed"/>
      <commit dir="workingcopy/moveTest" message="dir1 renamed"/>
    </svn>
  </target>

  <target name="testProp" depends="init">
    <copy todir="workingcopy/propTest">
      <fileset dir="model/propTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/propTest"/>
      <commit message="propTest added" dir="workingcopy/propTest"/>
		
      <propset path="workingcopy/propTest/file.png" name="svn:mime-type" value="image/png"/>
      <propset path="workingcopy/propTest/file.png" name="myPicture" file="workingcopy/propTest/icon.gif"/>
      <propset path="workingcopy/propTest/file.png" name="myProperty" value="myvalue"/>
      <propdel path="workingcopy/propTest/file.png" name="myProperty"/>
    </svn>
  </target>

  <target name="testDiff" depends="init">
    <copy todir="workingcopy/diffTest">
      <fileset dir="model/diffTest"></fileset>
    </copy>
    <copy file="workingcopy/diffTest/file.txt.version1" tofile="workingcopy/diffTest/file.txt"/>
    <svn javahl="${javahl}">
      <add dir="workingcopy/diffTest" recurse="false"/>
      <add file="workingcopy/diffTest/file.txt"/>
      <commit dir="workingcopy/diffTest" message="diffTest/file.txt added to repository"/>
    </svn>
    <copy file="workingcopy/diffTest/file.txt.version2" tofile="workingcopy/diffTest/file.txt" overwrite="true"/>    
    <svn javahl="${javahl}">
      <diff oldPath="workingcopy/diffTest/file.txt" outFile="workingcopy/diffTest/patch.txt"/>
    </svn>
  </target>

  <target name="testKeywords" depends="init">
    <copy todir="workingcopy/keywordsTest">
      <fileset dir="model/keywordsTest"></fileset>
    </copy>
    <svn username="cedric" javahl="${javahl}">
      <add dir="workingcopy/keywordsTest"/>
      <keywordsset file="workingcopy/keywordsTest/file.txt" keywords="LastChangedRevision"/> 
      <keywordsadd file="workingcopy/keywordsTest/file.txt" keywords="Author Id"/>
      <keywordsremove file="workingcopy/keywordsTest/file.txt" keywords="Id"/>
      <commit dir="workingcopy/keywordsTest" message="file.txt commited"/>
    </svn>
  </target>
	
  <target name="testUpdate" depends="init">
    <copy todir="workingcopy/updateTest">
      <fileset dir="model/updateTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/updateTest"/>
      <commit dir="workingcopy/updateTest" message="updateTest directory added to repository"/>
      <checkout url="${urlRepos}" destPath="coHEAD" />
    </svn>
      <copy file="workingcopy/updateTest/file1.txt" tofile="workingcopy/updateTest/file.txt" />
    <svn javahl="${javahl}">
      <add file="workingcopy/updateTest/file.txt"/>
      <commit dir="workingcopy/updateTest" message="updateTest/file.txt added to repository"/>
    </svn>
    <svn javahl="${javahl}">
      <update dir="coHEAD"/>
    </svn>
    <copy file="workingcopy/updateTest/file2.txt"  tofile="workingcopy/updateTest/file.txt" />
    <svn javahl="${javahl}">
      <commit dir="workingcopy/updateTest" message="updateTest/file.txt modified"/>
    </svn>
    <svn javahl="${javahl}">
      <update dir="coHEAD/updateTest"/>
    </svn>
  </target>

  <target name="testRevert" depends="init">
    <copy todir="workingcopy/revertTest">
      <fileset dir="model/revertTest"></fileset>
    </copy>
    <copy file="workingcopy/revertTest/file.txt.version1" tofile="workingcopy/revertTest/file.txt"/>
    <svn javahl="${javahl}">
      <add dir="workingcopy/revertTest" recurse="false"/>
      <add file="workingcopy/revertTest/file.txt"/>
      <commit dir="workingcopy/revertTest" message="revertTest/file.txt added to repository"/>
    </svn>
    <copy file="workingcopy/revertTest/file.txt.version2" tofile="workingcopy/revertTest/file.txt" overwrite="true"/>
    <svn javahl="${javahl}">
      <revert file="workingcopy/revertTest/file.txt"/>
    </svn>
  </target>

  <target name="testCat" depends="init">
    <copy todir="workingcopy/catTest">
      <fileset dir="model/catTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/catTest"/>
      <commit message="catTest added" dir="workingcopy/catTest"/>
      <cat url="${urlRepos}/catTest/file.txt" destFile="workingcopy/catTest/filecat.txt"/>
    </svn>  
  </target>

  <target name="testListener" depends="init">
    <copy todir="workingcopy/listenerTest">
      <fileset dir="model/listenerTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/listenerTest"/>
      <commit message="listenerTest added" dir="workingcopy/listenerTest"/>
    </svn>      
  </target>

  <target name="testStatus" depends="init">
    <copy todir="workingcopy/statusTest">
      <fileset dir="model/statusTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/statusTest" recurse="false"/>
      <commit dir="workingcopy/statusTest" message="statusTest committed" recurse="false"/>
      <add dir="workingcopy/statusTest/managedDir" recurse="false"/>
      <commit dir="workingcopy/statusTest/managedDir" message="statusTest/managedDir committed" recurse="false"/>
      
      <add file="workingcopy/statusTest/added.txt"/>
      <ignore file="workingcopy/statusTest/ignored.txt"/>
      <add file="workingcopy/statusTest/committed.txt"/>
      <commit file="workingcopy/statusTest/committed.txt" message="committed"/>
      <add file="workingcopy/statusTest/deleted.txt"/>
      <commit file="workingcopy/statusTest/deleted.txt" message="this file will be deleted"/>
      <delete file="workingcopy/statusTest/deleted.txt"/>
      
      <add file="workingcopy/statusTest/managedDir/added in managed dir.txt"/>
      
      <checkout url="${urlRepos}/statusTest" revision="HEAD" destPath="workingcopy/statusTest/nonManaged.dir/statusTest" recurse="false" />
    	
      <status path="workingcopy/statusTest/added.txt" 
      	textStatusProperty="testStatus.textStatus"
        propStatusProperty="testStatus.propStatus"
        lastChangedRevisionProperty="testStatus.lastCommitRevision"
      	revisionProperty="testStatus.revision"
      	lastCommitAuthorProperty="testStatus.lastCommitAuthor"
      />
    </svn>
  </target>

  <target name="testIgnore" depends="init">
    <copy todir="workingcopy/ignoreTest">
      <fileset dir="model/ignoreTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/ignoreTest" recurse="false"/>
      <add dir="workingcopy/ignoreTest/dir1" recurse="false"/>
      <add dir="workingcopy/ignoreTest/dir1/dir2" recurse="false"/>      
      <commit message="committed" dir="workingcopy/ignoreTest"/>
      <ignore file="workingcopy/ignoreTest/fileToIgnore.txt"/>
      <ignore dir="workingcopy/ignoreTest/dir1" pattern="*.ignore" recurse="true"/>
    </svn>
  </target>

  <!-- this test does not test svnant but svnClientAdapter -->
  <target name="testEntry" depends="init">
    <copy todir="workingcopy/entryTest">
      <fileset dir="model/entryTest"></fileset>
    </copy>
    <svn javahl="${javahl}">
      <add dir="workingcopy/entryTest"/>
      <commit dir="workingcopy/entryTest" message="entryTest directory added to repository"/>	
    </svn>
  </target>

  <target name="testResolve" depends="init">
    <copy file="model/resolveTest/file.txt" todir="workingcopy/resolveTest"/>
    <svn javahl="${javahl}">
      <add dir="workingcopy/resolveTest"/>
      <commit dir="workingcopy/resolveTest" message="resolveTest directory added to repository"/>	
    </svn>  

    <mkdir dir="workingcopy2"/>
    <svn javahl="${javahl}">
      <checkout url="${urlRepos}" destPath="workingcopy2" />
    </svn>

    <echo file="workingcopy2/resolveTest/file.txt" append="true">line 4</echo> 
    <svn javahl="${javahl}">
      <commit dir="workingcopy2/resolveTest" message="file.txt modified"/>	
    </svn>  
    <echo file="workingcopy/resolveTest/file.txt" append="true">the next line</echo>
    <svn javahl="${javahl}">
      <update dir="workingcopy/resolveTest"/>     
    </svn>
    <!-- there is a conflict on workingcopy/resolveTest now -->
  </target>

  <target name="testAnnotate" depends="init">
  	<mkdir dir="workingcopy/annotateTest"/>
  	<echo file="workingcopy/annotateTest/file.txt" append="false">line 1
</echo>
    <svn javahl="${javahl}">
      <add dir="workingcopy/annotateTest"/>
      <commit dir="workingcopy/annotateTest" message="annotateTest directory added to repository"/>	
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 2
</echo>
    <svn javahl="${javahl}" username="user1">
      <commit dir="workingcopy/annotateTest" message="modified"/>	
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 3
</echo>
    <svn javahl="${javahl}" username="user2">
      <commit dir="workingcopy/annotateTest" message="modified"/>	
    </svn>  
    <echo file="workingcopy/annotateTest/file.txt" append="true">line 4
</echo>  	
    <svn javahl="${javahl}" username="">
      <commit dir="workingcopy/annotateTest" message="modified"/>	
    </svn>    	
  </target>
	
  <target name="all" depends="init">
  </target>
	
</project>
